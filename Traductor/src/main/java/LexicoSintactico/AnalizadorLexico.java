/* The following code was generated by JFlex 1.7.0 */

/* ------------------------------------ Codigo de Usuario ------------------------------------------ */
package LexicoSintactico;
import java_cup.runtime.*;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory;
import java.io.FileReader;
  

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/main/java/lexicoSintactico/especLexica.flex</tt>
 */
public class AnalizadorLexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int CONST_LITERALES = 2;
  public static final int COMENTARIO_LINEA = 4;
  public static final int COMENTARIO_MULTILINEA = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\1\2\3\1\2\22\0\1\3\6\0\1\65\1\47"+
    "\1\50\1\44\1\43\1\52\1\32\1\35\1\0\12\34\1\53\1\51"+
    "\1\60\1\42\1\61\2\0\1\16\3\30\1\36\1\30\1\15\1\30"+
    "\1\26\2\30\1\54\1\17\1\25\1\14\1\12\1\30\1\13\1\30"+
    "\1\27\1\24\5\30\4\0\1\31\1\0\1\10\1\57\1\55\1\45"+
    "\1\41\1\40\1\7\1\62\1\22\1\30\1\30\1\63\1\11\1\21"+
    "\1\6\1\4\1\30\1\5\1\56\1\23\1\20\1\46\1\64\1\30"+
    "\2\30\1\66\1\37\10\0\1\3\32\0\1\3\11\0\1\0\12\0"+
    "\1\0\4\0\1\0\5\0\27\0\1\0\37\0\1\0\u01ca\0\4\0"+
    "\14\0\16\0\5\0\7\0\1\0\1\0\1\0\21\0\165\0\1\0"+
    "\2\0\2\0\4\0\1\0\1\0\6\0\1\0\1\0\3\0\1\0"+
    "\1\0\1\0\24\0\1\0\123\0\1\0\213\0\1\0\255\0\1\0"+
    "\46\0\2\0\1\0\7\0\47\0\11\0\55\0\1\0\1\0\1\0"+
    "\2\0\1\0\2\0\1\0\1\0\10\0\33\0\5\0\3\0\35\0"+
    "\13\0\5\0\100\0\12\33\4\0\146\0\1\0\10\0\2\0\12\0"+
    "\1\0\6\0\12\33\3\0\2\0\1\0\20\0\73\0\2\0\145\0"+
    "\16\0\12\33\54\0\4\0\1\0\5\0\56\0\22\0\34\0\104\0"+
    "\25\0\1\0\10\0\26\0\16\0\1\0\201\0\2\0\12\33\1\0"+
    "\23\0\1\0\10\0\2\0\2\0\2\0\26\0\1\0\7\0\1\0"+
    "\1\0\3\0\4\0\2\0\11\0\2\0\2\0\2\0\4\0\10\0"+
    "\1\0\4\0\2\0\1\0\5\0\2\0\12\33\2\0\17\0\3\0"+
    "\1\0\6\0\4\0\2\0\2\0\26\0\1\0\7\0\1\0\2\0"+
    "\1\0\2\0\1\0\2\0\2\0\1\0\1\0\5\0\4\0\2\0"+
    "\2\0\3\0\3\0\1\0\7\0\4\0\1\0\1\0\7\0\12\33"+
    "\6\0\13\0\3\0\1\0\11\0\1\0\3\0\1\0\26\0\1\0"+
    "\7\0\1\0\2\0\1\0\5\0\2\0\12\0\1\0\3\0\1\0"+
    "\3\0\2\0\1\0\17\0\4\0\2\0\12\33\11\0\1\0\7\0"+
    "\3\0\1\0\10\0\2\0\2\0\2\0\26\0\1\0\7\0\1\0"+
    "\2\0\1\0\5\0\2\0\11\0\2\0\2\0\2\0\3\0\10\0"+
    "\2\0\4\0\2\0\1\0\5\0\2\0\12\33\1\0\1\0\20\0"+
    "\2\0\1\0\6\0\3\0\3\0\1\0\4\0\3\0\2\0\1\0"+
    "\1\0\1\0\2\0\3\0\2\0\3\0\3\0\3\0\14\0\4\0"+
    "\5\0\3\0\3\0\1\0\4\0\2\0\1\0\6\0\1\0\16\0"+
    "\12\33\20\0\4\0\1\0\10\0\1\0\3\0\1\0\27\0\1\0"+
    "\20\0\3\0\10\0\1\0\3\0\1\0\4\0\7\0\2\0\1\0"+
    "\3\0\5\0\4\0\2\0\12\33\20\0\4\0\1\0\10\0\1\0"+
    "\3\0\1\0\27\0\1\0\12\0\1\0\5\0\2\0\11\0\1\0"+
    "\3\0\1\0\4\0\7\0\2\0\7\0\1\0\1\0\4\0\2\0"+
    "\12\33\1\0\2\0\16\0\3\0\1\0\10\0\1\0\3\0\1\0"+
    "\51\0\2\0\10\0\1\0\3\0\1\0\5\0\5\0\4\0\7\0"+
    "\5\0\2\0\12\33\12\0\6\0\2\0\2\0\1\0\22\0\3\0"+
    "\30\0\1\0\11\0\1\0\1\0\2\0\7\0\3\0\1\0\4\0"+
    "\6\0\1\0\1\0\1\0\10\0\6\0\12\33\2\0\2\0\15\0"+
    "\72\0\5\0\17\0\1\0\12\33\47\0\2\0\1\0\1\0\2\0"+
    "\2\0\1\0\1\0\2\0\1\0\6\0\4\0\1\0\7\0\1\0"+
    "\3\0\1\0\1\0\1\0\1\0\2\0\2\0\1\0\15\0\1\0"+
    "\3\0\2\0\5\0\1\0\1\0\1\0\6\0\2\0\12\33\2\0"+
    "\4\0\40\0\1\0\27\0\2\0\6\0\12\33\13\0\1\0\1\0"+
    "\1\0\1\0\1\0\4\0\12\0\1\0\44\0\4\0\24\0\1\0"+
    "\22\0\1\0\44\0\11\0\1\0\71\0\100\0\12\33\6\0\100\0"+
    "\12\33\4\0\2\0\46\0\1\0\1\0\5\0\1\0\2\0\53\0"+
    "\1\0\u014d\0\1\0\4\0\2\0\7\0\1\0\1\0\1\0\4\0"+
    "\2\0\51\0\1\0\4\0\2\0\41\0\1\0\4\0\2\0\7\0"+
    "\1\0\1\0\1\0\4\0\2\0\17\0\1\0\71\0\1\0\4\0"+
    "\2\0\103\0\2\0\3\0\40\0\20\0\20\0\126\0\2\0\6\0"+
    "\3\0\u026c\0\2\0\21\0\1\3\32\0\5\0\113\0\3\0\13\0"+
    "\7\0\15\0\1\0\7\0\13\0\25\0\13\0\24\0\14\0\15\0"+
    "\1\0\3\0\1\0\2\0\14\0\124\0\3\0\1\0\4\0\2\0"+
    "\2\0\12\33\41\0\3\0\2\0\12\33\6\0\130\0\10\0\53\0"+
    "\5\0\106\0\12\0\37\0\1\0\14\0\4\0\14\0\12\0\12\33"+
    "\36\0\2\0\5\0\13\0\54\0\4\0\32\0\6\0\12\33\46\0"+
    "\34\0\4\0\77\0\1\0\35\0\2\0\1\0\12\33\6\0\12\33"+
    "\15\0\1\0\10\0\17\0\101\0\114\0\4\0\12\33\21\0\11\0"+
    "\14\0\60\0\12\33\72\0\14\0\70\0\10\0\12\33\3\0\3\0"+
    "\12\33\44\0\2\0\11\0\107\0\3\0\1\0\43\0\1\0\2\0"+
    "\6\0\366\0\5\0\u011b\0\2\0\6\0\2\0\46\0\2\0\6\0"+
    "\2\0\10\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\37\0"+
    "\2\0\65\0\1\0\7\0\1\0\1\0\3\0\3\0\1\0\7\0"+
    "\3\0\4\0\2\0\6\0\4\0\15\0\5\0\3\0\1\0\7\0"+
    "\3\0\13\3\35\0\2\3\5\0\1\3\17\0\2\0\23\0\1\0"+
    "\12\0\1\3\21\0\1\0\15\0\1\0\20\0\15\0\63\0\41\0"+
    "\21\0\1\0\4\0\1\0\2\0\12\0\1\0\1\0\3\0\5\0"+
    "\6\0\1\0\1\0\1\0\1\0\1\0\1\0\4\0\1\0\13\0"+
    "\2\0\4\0\5\0\5\0\4\0\1\0\21\0\51\0\u032d\0\64\0"+
    "\u0716\0\57\0\1\0\57\0\1\0\205\0\6\0\11\0\14\0\46\0"+
    "\1\0\1\0\5\0\1\0\2\0\70\0\7\0\1\0\17\0\30\0"+
    "\11\0\7\0\1\0\7\0\1\0\7\0\1\0\7\0\1\0\7\0"+
    "\1\0\7\0\1\0\7\0\1\0\7\0\1\0\40\0\57\0\1\0"+
    "\u01d0\0\1\3\4\0\3\0\31\0\17\0\1\0\5\0\2\0\5\0"+
    "\4\0\126\0\2\0\2\0\2\0\3\0\1\0\132\0\1\0\4\0"+
    "\5\0\51\0\3\0\136\0\21\0\33\0\65\0\20\0\u0200\0\u19b6\0"+
    "\112\0\u51d6\0\52\0\u048d\0\103\0\56\0\2\0\u010d\0\3\0\20\0"+
    "\12\33\2\0\24\0\63\0\1\0\12\0\1\0\163\0\45\0\11\0"+
    "\2\0\147\0\2\0\44\0\1\0\10\0\77\0\61\0\30\0\64\0"+
    "\14\0\106\0\12\0\12\33\6\0\30\0\3\0\1\0\1\0\1\0"+
    "\2\0\12\33\44\0\2\0\44\0\14\0\35\0\3\0\101\0\16\0"+
    "\1\0\12\33\6\0\20\0\12\33\5\0\1\0\67\0\11\0\16\0"+
    "\2\0\12\33\6\0\27\0\3\0\111\0\30\0\3\0\2\0\20\0"+
    "\2\0\5\0\12\0\6\0\2\0\6\0\2\0\6\0\11\0\7\0"+
    "\1\0\7\0\1\0\53\0\1\0\12\0\12\0\173\0\1\0\2\0"+
    "\2\0\12\33\6\0\u2ba4\0\14\0\27\0\4\0\61\0\u2104\0\u016e\0"+
    "\2\0\152\0\46\0\7\0\14\0\5\0\5\0\14\0\1\0\15\0"+
    "\1\0\5\0\1\0\1\0\1\0\2\0\1\0\2\0\1\0\154\0"+
    "\41\0\u016b\0\22\0\100\0\2\0\66\0\50\0\14\0\4\0\20\0"+
    "\20\0\20\0\3\0\2\0\30\0\3\0\40\0\5\0\1\0\207\0"+
    "\23\0\12\33\7\0\32\0\4\0\1\0\1\0\32\0\13\0\131\0"+
    "\3\0\6\0\2\0\6\0\2\0\6\0\2\0\3\0\43\0\14\0"+
    "\1\0\32\0\1\0\23\0\1\0\2\0\1\0\17\0\2\0\16\0"+
    "\42\0\173\0\105\0\65\0\210\0\1\0\202\0\35\0\3\0\61\0"+
    "\17\0\1\0\37\0\40\0\20\0\33\0\5\0\53\0\5\0\36\0"+
    "\2\0\44\0\4\0\10\0\1\0\5\0\52\0\236\0\2\0\12\33"+
    "\6\0\44\0\4\0\44\0\4\0\50\0\10\0\64\0\234\0\u0137\0"+
    "\11\0\26\0\12\0\10\0\230\0\6\0\2\0\1\0\1\0\54\0"+
    "\1\0\2\0\3\0\1\0\2\0\27\0\12\0\27\0\11\0\37\0"+
    "\101\0\23\0\1\0\2\0\12\0\26\0\12\0\32\0\106\0\70\0"+
    "\6\0\2\0\100\0\4\0\1\0\2\0\5\0\10\0\1\0\3\0"+
    "\1\0\33\0\4\0\3\0\4\0\1\0\40\0\35\0\3\0\35\0"+
    "\43\0\10\0\1\0\36\0\31\0\66\0\12\0\26\0\12\0\23\0"+
    "\15\0\22\0\156\0\111\0\67\0\63\0\15\0\63\0\u030d\0\107\0"+
    "\37\0\12\33\17\0\74\0\25\0\31\0\7\0\12\33\6\0\65\0"+
    "\1\0\12\33\20\0\44\0\2\0\1\0\11\0\105\0\5\0\3\0"+
    "\3\0\12\33\1\0\1\0\1\0\43\0\22\0\1\0\45\0\6\0"+
    "\1\0\101\0\7\0\1\0\1\0\1\0\4\0\1\0\17\0\1\0"+
    "\12\0\7\0\73\0\5\0\12\33\6\0\4\0\1\0\10\0\2\0"+
    "\2\0\2\0\26\0\1\0\7\0\1\0\2\0\1\0\5\0\2\0"+
    "\11\0\2\0\2\0\2\0\3\0\2\0\1\0\6\0\1\0\5\0"+
    "\7\0\2\0\7\0\3\0\5\0\213\0\113\0\5\0\12\33\46\0"+
    "\106\0\1\0\1\0\10\0\12\33\246\0\66\0\2\0\11\0\27\0"+
    "\6\0\42\0\101\0\3\0\1\0\13\0\12\33\46\0\70\0\10\0"+
    "\12\33\66\0\32\0\3\0\17\0\4\0\12\33\u0166\0\100\0\12\33"+
    "\25\0\1\0\u01c0\0\71\0\u0107\0\11\0\1\0\55\0\1\0\11\0"+
    "\17\0\12\33\30\0\36\0\2\0\26\0\1\0\16\0\u0349\0\u039a\0"+
    "\146\0\157\0\21\0\304\0\u0abc\0\u042f\0\u0fd1\0\u0247\0\u21b9\0\u0239\0"+
    "\7\0\37\0\1\0\12\33\146\0\36\0\2\0\5\0\13\0\67\0"+
    "\11\0\4\0\14\0\12\33\11\0\25\0\5\0\23\0\u0370\0\105\0"+
    "\13\0\57\0\20\0\21\0\100\0\1\0\37\0\u17ed\0\23\0\u02f3\0"+
    "\u250d\0\2\0\u0bfe\0\153\0\5\0\15\0\3\0\11\0\7\0\12\0"+
    "\3\0\2\0\u14c6\0\5\0\3\0\6\0\10\0\10\0\2\0\7\0"+
    "\36\0\4\0\224\0\3\0\u01bb\0\125\0\1\0\107\0\1\0\2\0"+
    "\2\0\1\0\2\0\2\0\2\0\4\0\1\0\14\0\1\0\1\0"+
    "\1\0\7\0\1\0\101\0\1\0\4\0\2\0\10\0\1\0\7\0"+
    "\1\0\34\0\1\0\4\0\1\0\5\0\1\0\1\0\3\0\7\0"+
    "\1\0\u0154\0\2\0\31\0\1\0\31\0\1\0\37\0\1\0\31\0"+
    "\1\0\37\0\1\0\31\0\1\0\37\0\1\0\31\0\1\0\37\0"+
    "\1\0\31\0\1\0\10\0\2\0\62\33\u0200\0\67\0\4\0\62\0"+
    "\10\0\1\0\16\0\1\0\26\0\5\0\1\0\17\0\u0550\0\7\0"+
    "\1\0\21\0\2\0\7\0\1\0\2\0\1\0\5\0\u07d5\0\305\0"+
    "\13\0\7\0\51\0\113\0\5\0\12\33\u04a6\0\4\0\1\0\33\0"+
    "\1\0\2\0\1\0\1\0\2\0\1\0\1\0\12\0\1\0\4\0"+
    "\1\0\1\0\1\0\1\0\6\0\1\0\4\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\3\0\1\0\2\0\1\0\1\0\2\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\2\0"+
    "\1\0\1\0\2\0\4\0\1\0\7\0\1\0\4\0\1\0\4\0"+
    "\1\0\1\0\1\0\12\0\1\0\21\0\5\0\3\0\1\0\5\0"+
    "\1\0\21\0\u0274\0\32\0\6\0\32\0\6\0\32\0\u0e76\0\ua6d7\0"+
    "\51\0\u1035\0\13\0\336\0\2\0\u1682\0\u295e\0\u021e\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u06ed\0"+
    "\360\0\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\16\3\1\4\1\5\1\6\1\1"+
    "\2\3\1\7\1\10\1\11\2\3\1\12\1\13\1\14"+
    "\1\15\1\16\2\3\1\17\1\20\1\3\1\21\1\22"+
    "\2\23\1\24\1\25\1\26\1\25\2\3\1\27\6\3"+
    "\1\30\1\31\3\3\2\0\4\3\1\32\2\3\1\33"+
    "\1\34\2\3\1\35\1\36\1\3\1\37\1\40\1\26"+
    "\2\3\1\41\1\42\4\3\1\43\3\3\1\44\1\0"+
    "\1\44\1\45\1\3\1\46\2\3\1\47\1\50\7\3"+
    "\1\51\1\52\1\3\1\53\2\3\1\54\10\3\1\55"+
    "\3\3\1\56\1\57\1\60\2\3\1\61\3\3\1\62"+
    "\1\63\1\3\1\64\2\3\1\65\1\66";

  private static int [] zzUnpackAction() {
    int [] result = new int[147];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302\0\u0339"+
    "\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483\0\334\0\u044c"+
    "\0\u04ba\0\u04f1\0\334\0\u044c\0\334\0\u0528\0\u055f\0\u0596"+
    "\0\334\0\334\0\334\0\u05cd\0\u0604\0\u063b\0\u0672\0\u06a9"+
    "\0\u06e0\0\334\0\334\0\334\0\u0717\0\u074e\0\334\0\u0785"+
    "\0\u07bc\0\u07f3\0\u082a\0\u01ef\0\u0861\0\u0898\0\u08cf\0\u0906"+
    "\0\u093d\0\u0974\0\u01ef\0\u01ef\0\u09ab\0\u09e2\0\u0a19\0\u0a50"+
    "\0\u0a87\0\u0abe\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08"+
    "\0\334\0\334\0\u0c3f\0\u0c76\0\334\0\334\0\u0cad\0\334"+
    "\0\334\0\334\0\u0ce4\0\u0d1b\0\u01ef\0\u01ef\0\u0d52\0\u0d89"+
    "\0\u0dc0\0\u0df7\0\u01ef\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a"+
    "\0\u0f0a\0\u01ef\0\u0f41\0\u01ef\0\u0f78\0\u0faf\0\u01ef\0\u01ef"+
    "\0\u0fe6\0\u101d\0\u1054\0\u108b\0\u10c2\0\u10f9\0\u1130\0\u01ef"+
    "\0\u01ef\0\u1167\0\u01ef\0\u119e\0\u11d5\0\u01ef\0\u120c\0\u1243"+
    "\0\u127a\0\u12b1\0\u12e8\0\u131f\0\u1356\0\u138d\0\u01ef\0\u13c4"+
    "\0\u13fb\0\u1432\0\u01ef\0\u01ef\0\u01ef\0\u1469\0\u14a0\0\u01ef"+
    "\0\u14d7\0\u150e\0\u1545\0\u01ef\0\u01ef\0\u157c\0\u01ef\0\u15b3"+
    "\0\u15ea\0\u01ef\0\u01ef";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[147];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\3\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\4\12\1\17\1\20\1\21\1\22\1\23"+
    "\1\12\1\24\2\12\1\5\1\25\2\26\1\27\1\12"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\12\1\45\1\12"+
    "\1\46\1\47\1\50\2\12\1\51\1\52\1\53\2\54"+
    "\1\55\62\54\1\56\1\54\1\57\1\60\131\57\1\61"+
    "\22\57\70\0\3\6\67\0\1\12\1\62\24\12\2\0"+
    "\1\12\1\0\1\12\1\0\2\12\3\0\2\12\5\0"+
    "\4\12\2\0\3\12\6\0\26\12\2\0\1\12\1\0"+
    "\1\12\1\0\1\12\1\63\3\0\2\12\5\0\4\12"+
    "\2\0\3\12\6\0\1\12\1\64\24\12\2\0\1\12"+
    "\1\0\1\12\1\0\2\12\3\0\2\12\5\0\4\12"+
    "\2\0\3\12\6\0\26\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\3\0\2\12\5\0\4\12\2\0\3\12"+
    "\6\0\15\12\1\65\10\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\3\0\2\12\5\0\4\12\2\0\3\12"+
    "\6\0\2\12\1\66\23\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\3\0\2\12\5\0\4\12\2\0\3\12"+
    "\6\0\7\12\1\67\16\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\3\0\2\12\5\0\4\12\2\0\3\12"+
    "\6\0\26\12\2\0\1\12\1\0\1\70\1\0\2\12"+
    "\3\0\2\12\5\0\4\12\2\0\3\12\6\0\15\12"+
    "\1\71\10\12\2\0\1\12\1\0\1\12\1\0\2\12"+
    "\3\0\2\12\5\0\4\12\2\0\3\12\6\0\2\12"+
    "\1\72\23\12\2\0\1\12\1\0\1\12\1\0\2\12"+
    "\3\0\2\12\5\0\4\12\2\0\3\12\6\0\26\12"+
    "\2\0\1\12\1\0\1\12\1\0\1\73\1\12\3\0"+
    "\2\12\5\0\4\12\2\0\3\12\6\0\2\12\1\74"+
    "\23\12\2\0\1\12\1\0\1\12\1\0\2\12\3\0"+
    "\2\12\5\0\4\12\2\0\1\75\2\12\6\0\21\12"+
    "\1\76\4\12\2\0\1\12\1\0\1\12\1\0\2\12"+
    "\3\0\2\12\5\0\4\12\2\0\3\12\6\0\21\12"+
    "\1\77\4\12\2\0\1\12\1\0\1\12\1\0\2\12"+
    "\3\0\2\12\5\0\4\12\2\0\3\12\35\0\2\26"+
    "\65\0\2\26\1\100\2\101\1\0\1\101\31\0\2\12"+
    "\1\102\11\12\1\103\11\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\3\0\2\12\5\0\4\12\2\0\3\12"+
    "\6\0\15\12\1\104\10\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\3\0\2\12\5\0\4\12\2\0\1\12"+
    "\1\105\1\12\6\0\2\12\1\106\13\12\1\107\7\12"+
    "\2\0\1\12\1\0\1\12\1\0\2\12\3\0\2\12"+
    "\5\0\4\12\2\0\3\12\6\0\4\12\1\110\21\12"+
    "\2\0\1\12\1\0\1\12\1\0\2\12\3\0\2\12"+
    "\5\0\4\12\2\0\3\12\46\0\1\111\64\0\1\112"+
    "\30\0\2\12\1\113\23\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\3\0\2\12\5\0\4\12\2\0\3\12"+
    "\6\0\26\12\2\0\1\12\1\0\1\12\1\0\1\12"+
    "\1\114\3\0\2\12\5\0\4\12\2\0\3\12\44\0"+
    "\1\115\66\0\1\116\30\0\26\12\2\0\1\12\1\0"+
    "\1\12\1\0\2\12\3\0\2\12\5\0\4\12\2\0"+
    "\1\117\2\12\3\0\1\120\152\0\1\121\2\0\1\60"+
    "\135\0\1\122\22\0\2\12\1\123\23\12\2\0\1\12"+
    "\1\0\1\12\1\0\2\12\3\0\2\12\5\0\4\12"+
    "\2\0\3\12\6\0\1\124\25\12\2\0\1\12\1\0"+
    "\1\12\1\0\2\12\3\0\2\12\5\0\4\12\2\0"+
    "\3\12\6\0\26\12\2\0\1\12\1\0\1\12\1\0"+
    "\2\12\3\0\1\125\1\12\5\0\4\12\2\0\3\12"+
    "\6\0\26\12\2\0\1\12\1\0\1\12\1\0\2\12"+
    "\3\0\1\126\1\12\5\0\4\12\2\0\3\12\6\0"+
    "\10\12\1\127\15\12\2\0\1\12\1\0\1\12\1\0"+
    "\2\12\3\0\2\12\5\0\4\12\2\0\3\12\6\0"+
    "\12\12\1\130\13\12\2\0\1\12\1\0\1\12\1\0"+
    "\2\12\3\0\2\12\5\0\4\12\2\0\3\12\6\0"+
    "\16\12\1\131\1\132\6\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\3\0\2\12\5\0\4\12\2\0\3\12"+
    "\6\0\17\12\1\133\6\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\3\0\2\12\5\0\4\12\2\0\3\12"+
    "\6\0\26\12\2\0\1\12\1\0\1\12\1\0\1\12"+
    "\1\134\3\0\2\12\5\0\4\12\2\0\3\12\6\0"+
    "\22\12\1\135\3\12\2\0\1\12\1\0\1\12\1\0"+
    "\2\12\3\0\2\12\5\0\4\12\2\0\3\12\6\0"+
    "\23\12\1\136\2\12\2\0\1\12\1\0\1\12\1\0"+
    "\2\12\3\0\2\12\5\0\4\12\2\0\3\12\35\0"+
    "\2\137\64\0\1\140\2\141\2\0\1\140\3\0\1\140"+
    "\27\0\1\12\1\142\24\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\3\0\2\12\5\0\4\12\2\0\3\12"+
    "\6\0\15\12\1\143\10\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\3\0\2\12\5\0\4\12\2\0\3\12"+
    "\6\0\26\12\2\0\1\12\1\0\1\12\1\0\2\12"+
    "\3\0\1\144\1\12\5\0\4\12\2\0\3\12\6\0"+
    "\26\12\2\0\1\12\1\0\1\12\1\0\2\12\3\0"+
    "\2\12\5\0\2\12\1\145\1\12\2\0\3\12\6\0"+
    "\26\12\2\0\1\12\1\0\1\12\1\0\2\12\3\0"+
    "\2\12\5\0\4\12\2\0\2\12\1\146\6\0\26\12"+
    "\2\0\1\12\1\0\1\12\1\0\2\12\3\0\1\12"+
    "\1\147\5\0\4\12\2\0\3\12\6\0\1\12\1\150"+
    "\24\12\2\0\1\12\1\0\1\12\1\0\2\12\3\0"+
    "\2\12\5\0\4\12\2\0\3\12\6\0\15\12\1\151"+
    "\10\12\2\0\1\12\1\0\1\12\1\0\2\12\3\0"+
    "\2\12\5\0\4\12\2\0\3\12\6\0\3\12\1\152"+
    "\22\12\2\0\1\12\1\0\1\12\1\0\2\12\3\0"+
    "\2\12\5\0\4\12\2\0\3\12\6\0\16\12\1\153"+
    "\7\12\2\0\1\12\1\0\1\12\1\0\2\12\3\0"+
    "\2\12\5\0\4\12\2\0\3\12\6\0\3\12\1\154"+
    "\22\12\2\0\1\12\1\0\1\12\1\0\2\12\3\0"+
    "\2\12\5\0\1\12\1\155\2\12\2\0\3\12\6\0"+
    "\26\12\2\0\1\12\1\0\1\12\1\0\1\12\1\156"+
    "\3\0\2\12\5\0\4\12\2\0\3\12\6\0\11\12"+
    "\1\157\14\12\2\0\1\12\1\0\1\12\1\0\2\12"+
    "\3\0\2\12\5\0\4\12\2\0\3\12\6\0\26\12"+
    "\2\0\1\12\1\0\1\12\1\0\2\12\3\0\2\12"+
    "\5\0\1\160\3\12\2\0\3\12\6\0\17\12\1\161"+
    "\6\12\2\0\1\12\1\0\1\12\1\0\2\12\3\0"+
    "\2\12\5\0\4\12\2\0\3\12\6\0\16\12\1\162"+
    "\7\12\2\0\1\12\1\0\1\12\1\0\2\12\3\0"+
    "\2\12\5\0\4\12\2\0\3\12\6\0\15\12\1\163"+
    "\10\12\2\0\1\12\1\0\1\12\1\0\2\12\3\0"+
    "\2\12\5\0\4\12\2\0\3\12\6\0\23\12\1\161"+
    "\2\12\2\0\1\12\1\0\1\12\1\0\2\12\3\0"+
    "\2\12\5\0\4\12\2\0\3\12\6\0\26\12\2\0"+
    "\1\12\1\0\1\164\1\0\2\12\3\0\2\12\5\0"+
    "\4\12\2\0\3\12\35\0\2\137\1\0\2\101\1\0"+
    "\1\101\60\0\2\141\36\0\26\12\2\0\1\12\1\0"+
    "\1\12\1\0\2\12\3\0\2\12\5\0\1\12\1\165"+
    "\2\12\2\0\3\12\6\0\26\12\2\0\1\12\1\0"+
    "\1\12\1\0\1\12\1\166\3\0\2\12\5\0\4\12"+
    "\2\0\3\12\6\0\15\12\1\167\10\12\2\0\1\12"+
    "\1\0\1\12\1\0\2\12\3\0\2\12\5\0\4\12"+
    "\2\0\3\12\6\0\26\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\3\0\2\12\5\0\2\12\1\170\1\12"+
    "\2\0\3\12\6\0\16\12\1\171\7\12\2\0\1\12"+
    "\1\0\1\12\1\0\2\12\3\0\2\12\5\0\4\12"+
    "\2\0\3\12\6\0\26\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\3\0\2\12\5\0\4\12\2\0\1\12"+
    "\1\172\1\12\6\0\1\12\1\173\24\12\2\0\1\12"+
    "\1\0\1\12\1\0\2\12\3\0\2\12\5\0\4\12"+
    "\2\0\3\12\6\0\26\12\2\0\1\12\1\0\1\12"+
    "\1\0\1\12\1\174\3\0\2\12\5\0\4\12\2\0"+
    "\3\12\6\0\4\12\1\175\21\12\2\0\1\12\1\0"+
    "\1\12\1\0\2\12\3\0\2\12\5\0\4\12\2\0"+
    "\3\12\6\0\7\12\1\176\16\12\2\0\1\12\1\0"+
    "\1\12\1\0\2\12\3\0\2\12\5\0\4\12\2\0"+
    "\3\12\6\0\26\12\2\0\1\12\1\0\1\12\1\0"+
    "\2\12\3\0\2\12\5\0\4\12\2\0\1\12\1\177"+
    "\1\12\6\0\11\12\1\200\14\12\2\0\1\12\1\0"+
    "\1\12\1\0\2\12\3\0\2\12\5\0\4\12\2\0"+
    "\3\12\6\0\17\12\1\201\6\12\2\0\1\12\1\0"+
    "\1\12\1\0\2\12\3\0\2\12\5\0\4\12\2\0"+
    "\3\12\6\0\17\12\1\202\6\12\2\0\1\12\1\0"+
    "\1\12\1\0\2\12\3\0\2\12\5\0\4\12\2\0"+
    "\3\12\6\0\17\12\1\203\6\12\2\0\1\12\1\0"+
    "\1\12\1\0\2\12\3\0\2\12\5\0\4\12\2\0"+
    "\3\12\6\0\15\12\1\204\10\12\2\0\1\12\1\0"+
    "\1\12\1\0\2\12\3\0\2\12\5\0\4\12\2\0"+
    "\3\12\6\0\26\12\2\0\1\12\1\0\1\12\1\0"+
    "\1\12\1\205\3\0\2\12\5\0\4\12\2\0\3\12"+
    "\6\0\4\12\1\206\21\12\2\0\1\12\1\0\1\12"+
    "\1\0\2\12\3\0\2\12\5\0\4\12\2\0\3\12"+
    "\6\0\26\12\2\0\1\12\1\0\1\12\1\0\2\12"+
    "\3\0\1\207\1\12\5\0\4\12\2\0\3\12\6\0"+
    "\17\12\1\210\6\12\2\0\1\12\1\0\1\12\1\0"+
    "\2\12\3\0\2\12\5\0\4\12\2\0\3\12\6\0"+
    "\12\12\1\211\13\12\2\0\1\12\1\0\1\12\1\0"+
    "\2\12\3\0\2\12\5\0\4\12\2\0\3\12\6\0"+
    "\26\12\2\0\1\12\1\0\1\212\1\0\2\12\3\0"+
    "\2\12\5\0\4\12\2\0\3\12\6\0\16\12\1\213"+
    "\7\12\2\0\1\12\1\0\1\12\1\0\2\12\3\0"+
    "\2\12\5\0\4\12\2\0\3\12\6\0\2\12\1\214"+
    "\23\12\2\0\1\12\1\0\1\12\1\0\2\12\3\0"+
    "\2\12\5\0\4\12\2\0\3\12\6\0\5\12\1\215"+
    "\20\12\2\0\1\12\1\0\1\12\1\0\2\12\3\0"+
    "\2\12\5\0\4\12\2\0\3\12\6\0\14\12\1\216"+
    "\11\12\2\0\1\12\1\0\1\12\1\0\2\12\3\0"+
    "\2\12\5\0\4\12\2\0\3\12\6\0\13\12\1\215"+
    "\12\12\2\0\1\12\1\0\1\12\1\0\2\12\3\0"+
    "\2\12\5\0\4\12\2\0\3\12\6\0\7\12\1\217"+
    "\16\12\2\0\1\12\1\0\1\12\1\0\2\12\3\0"+
    "\2\12\5\0\4\12\2\0\3\12\6\0\2\12\1\220"+
    "\23\12\2\0\1\12\1\0\1\12\1\0\2\12\3\0"+
    "\2\12\5\0\4\12\2\0\3\12\6\0\1\12\1\221"+
    "\24\12\2\0\1\12\1\0\1\12\1\0\2\12\3\0"+
    "\2\12\5\0\4\12\2\0\3\12\6\0\15\12\1\222"+
    "\10\12\2\0\1\12\1\0\1\12\1\0\2\12\3\0"+
    "\2\12\5\0\4\12\2\0\3\12\6\0\26\12\2\0"+
    "\1\12\1\0\1\12\1\0\1\12\1\223\3\0\2\12"+
    "\5\0\4\12\2\0\3\12\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5665];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\21\1\1\11\3\1\1\11\1\1\1\11"+
    "\3\1\3\11\6\1\3\11\2\1\1\11\20\1\2\0"+
    "\7\1\2\11\2\1\2\11\1\1\3\11\15\1\1\0"+
    "\63\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[147];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    String const_Literal = "";
    ComplexSymbolFactory symbolFactory;
    private String auxLexema = "";
    public AnalizadorLexico(java.io.Reader in, ComplexSymbolFactory sf){
	this(in);
	symbolFactory = sf;
    }
    
	    
	  
	
	  private Symbol symbol(int sym) {
	       Location fila = new Location("Desde",yyline+1,yycolumn+ 1);
	       Location columna = new Location("Hasta",yyline+1,yycolumn+yylength());
	      
	      return symbolFactory.newSymbol("eof", sym,fila,columna );
	  }
	  
	  
	  private Symbol symbol(String name, int sym, Object val) {
	      Location fila = new Location("Line",yyline+1,yycolumn+ 1);
	      Location columna= new Location("Column",yyline+1,yycolumn+ yylength());
	     
	      return symbolFactory.newSymbol(name, sym, fila, columna,val.toString());
	  }
	

private void concatenar(String lexema){
	               
	    const_Literal = const_Literal + lexema;  
 }


    



public String getLexema(){

return this.auxLexema;

}
private void appendLexema(String lexema){
                 
      auxLexema = auxLexema + lexema ;  
 }





  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexico(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2948) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(sym.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new Error ("Caracter ilegal: " + "["+ yytext() + "]"  + " Linea =" + (yyline+1) + " Columna =" + (yycolumn+1));
            } 
            // fall through
          case 55: break;
          case 2: 
            { /* ignoramos */
            } 
            // fall through
          case 56: break;
          case 3: 
            { return symbol("Identificador",sym.identifier,yytext());
            } 
            // fall through
          case 57: break;
          case 4: 
            { return symbol("menos",sym.op_resta,yytext());
            } 
            // fall through
          case 58: break;
          case 5: 
            { return symbol("integer_const",sym.numeric_integer_const, yytext());
            } 
            // fall through
          case 59: break;
          case 6: 
            { return symbol(".",sym.punto,yytext());
            } 
            // fall through
          case 60: break;
          case 7: 
            { return symbol("=",sym.opr_iguales,yytext());
            } 
            // fall through
          case 61: break;
          case 8: 
            { return symbol("plus",sym.op_suma,yytext());
            } 
            // fall through
          case 62: break;
          case 9: 
            { return symbol("mul",sym.op_mult,yytext());
            } 
            // fall through
          case 63: break;
          case 10: 
            { return symbol("(",sym.abre_parent,yytext());
            } 
            // fall through
          case 64: break;
          case 11: 
            { return symbol(")",sym.cierra_parent,yytext());
            } 
            // fall through
          case 65: break;
          case 12: 
            { return symbol(";",sym.punto_y_coma, yytext());
            } 
            // fall through
          case 66: break;
          case 13: 
            { return symbol(",",sym.coma ,yytext());
            } 
            // fall through
          case 67: break;
          case 14: 
            { return symbol(":",sym.dospuntos,yytext());
            } 
            // fall through
          case 68: break;
          case 15: 
            { return symbol("<",sym.opr_menor,yytext());
            } 
            // fall through
          case 69: break;
          case 16: 
            { return symbol(">",sym.opr_mayor,yytext());
            } 
            // fall through
          case 70: break;
          case 17: 
            { yybegin(CONST_LITERALES);
            } 
            // fall through
          case 71: break;
          case 18: 
            { yybegin(COMENTARIO_LINEA);
            } 
            // fall through
          case 72: break;
          case 19: 
            { concatenar(yytext());
            } 
            // fall through
          case 73: break;
          case 20: 
            { yybegin(YYINITIAL);
                                      String aux = const_Literal;
                                      const_Literal = "";
                                      
                                      return symbol("constLiteral",sym.string_const, new java.lang.String(aux));
            } 
            // fall through
          case 74: break;
          case 21: 
            { /* ignorar */
            } 
            // fall through
          case 75: break;
          case 22: 
            { yybegin(YYINITIAL);
            } 
            // fall through
          case 76: break;
          case 23: 
            { return symbol("or",sym.opl_or,yytext());
            } 
            // fall through
          case 77: break;
          case 24: 
            { return symbol("if",sym.word_if,yytext());
            } 
            // fall through
          case 78: break;
          case 25: 
            { return symbol("to",sym.word_to,yytext());
            } 
            // fall through
          case 79: break;
          case 26: 
            { return symbol("do",sym.word_do,yytext());
            } 
            // fall through
          case 80: break;
          case 27: 
            { yybegin(COMENTARIO_MULTILINEA);
            } 
            // fall through
          case 81: break;
          case 28: 
            { return symbol(":=",sym.asignacion,yytext());
            } 
            // fall through
          case 82: break;
          case 29: 
            { return symbol("<=",sym.opr_menor_igual,yytext());
            } 
            // fall through
          case 83: break;
          case 30: 
            { return symbol(">=",sym.opr_mayor_igual,yytext());
            } 
            // fall through
          case 84: break;
          case 31: 
            { throw new Error ("No existe caracter de cierre ['] de constante literal "  + " Linea =" + (yyline+1) + " Columna =" + (yycolumn+1));
            } 
            // fall through
          case 85: break;
          case 32: 
            { concatenar("'");
            } 
            // fall through
          case 86: break;
          case 33: 
            { return symbol("and",sym.opl_and,yytext());
            } 
            // fall through
          case 87: break;
          case 34: 
            { return symbol("modulo",sym.op_mod,yytext());
            } 
            // fall through
          case 88: break;
          case 35: 
            { return symbol("neg",sym.not,yytext());
            } 
            // fall through
          case 89: break;
          case 36: 
            { return symbol("real_const",sym.numeric_real_const ,yytext());
            } 
            // fall through
          case 90: break;
          case 37: 
            { return symbol("for",sym.word_for,yytext());
            } 
            // fall through
          case 91: break;
          case 38: 
            { return symbol("end",sym.end,yytext());
            } 
            // fall through
          case 92: break;
          case 39: 
            { return symbol("div",sym.op_div,yytext());
            } 
            // fall through
          case 93: break;
          case 40: 
            { return symbol("var",sym.var,yytext());
            } 
            // fall through
          case 94: break;
          case 41: 
            { return symbol("real",sym.real,yytext());
            } 
            // fall through
          case 95: break;
          case 42: 
            { return symbol("neg",sym.unit,yytext());
            } 
            // fall through
          case 96: break;
          case 43: 
            { return symbol("then",sym.word_then,yytext());
            } 
            // fall through
          case 97: break;
          case 44: 
            { return symbol("else",sym.word_else,yytext());
            } 
            // fall through
          case 98: break;
          case 45: 
            { return symbol("until",sym.word_until,yytext());
            } 
            // fall through
          case 99: break;
          case 46: 
            { return symbol("CONST",sym.word_const,yytext());
            } 
            // fall through
          case 100: break;
          case 47: 
            { return symbol("begin",sym.begin,yytext());
            } 
            // fall through
          case 101: break;
          case 48: 
            { return symbol("while",sym.word_while,yytext());
            } 
            // fall through
          case 102: break;
          case 49: 
            { return symbol("repeat",sym.word_repeat,yytext());
            } 
            // fall through
          case 103: break;
          case 50: 
            { return symbol("downto",sym.word_downto,yytext());
            } 
            // fall through
          case 104: break;
          case 51: 
            { return symbol("program",sym.program,yytext());
            } 
            // fall through
          case 105: break;
          case 52: 
            { return symbol("int",sym.integer,yytext());
            } 
            // fall through
          case 106: break;
          case 53: 
            { return symbol("function",sym.function,yytext());
            } 
            // fall through
          case 107: break;
          case 54: 
            { return symbol("procedure",sym.procedure,yytext());
            } 
            // fall through
          case 108: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
