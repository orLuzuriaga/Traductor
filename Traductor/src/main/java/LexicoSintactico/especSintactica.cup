/* ---------------Seccion de declaraciones preliminares--------------------*/


package LexicoSintactico;

import java_cup.runtime.*;
import java.io.FileReader;
import java_cup.runtime.Symbol;
import simbolos.*;
import java.io.FileOutputStream;
import java.io.IOException;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java.util.*;
import java.util.HashMap;  
import java.util.Collections;  
 
parser code {:
    
    
    public NoTerminal programa;
    public NoTerminal getProgram(){
    return this.programa;
    }
    
   
 public AnalizadorSintactico(AnalizadorLexico lex, ComplexSymbolFactory sf) {
    super(lex,sf);
  }
 

	 
 public void syntax_error(String msj,Location line, Location column){
 
   
   report_error("Syntax error for  "+ msj + " Line: "+line.getLine()+ "  to Column: "+column.getColumn()+"\n");
    }


 public void syntax_error(String msj,Location line){
 
     report_error("Syntax error"+ msj + " Line: "+line.getLine() +"\n");
    }



    
  public void report_error(String msj){
	    System.err.print(msj);
	  
	    }
:};
   


   
/*-------------------------------------------Terminales (token escaneados)---------------------------------------------------------*/

/*Operadores aritmeticos*/
terminal String op_suma;
terminal String op_resta;
terminal String op_mult;
terminal String op_mod;
terminal String op_div;

/*Simbolos */
terminal String abre_parent;
terminal String cierra_parent;
terminal String coma;
terminal String punto_y_coma;
terminal String punto;
terminal String asignacion;
terminal String dospuntos;


/*Palabras reservadas */
terminal String integer;
terminal String real; 
terminal String word_const;
terminal String program;
terminal String begin;
terminal String end;
terminal String var;
terminal String procedure;
terminal String function;
terminal String not;
terminal String unit;

/* Operadores relacionales */
terminal String opr_iguales;
terminal String opr_menor;
terminal String opr_mayor;
terminal String opr_menor_igual;
terminal String opr_mayor_igual;

/* Operadores logicos */
terminal String opl_or; 
terminal String opl_and;


/* Sentencias de control de flujo */
terminal String word_if;
terminal String word_then; 
terminal String word_else;
terminal String word_while;
terminal String word_repeat;
terminal String word_until;
terminal String word_for;
terminal String word_do;
terminal String word_to;
terminal String word_downto;


/*Identificador*/
terminal String identifier;


/*Constantes Numericas*/

terminal String numeric_real_const;
terminal String numeric_integer_const;


/*Constante literal*/
terminal String string_const;



/*----------------------------------------- NO TERMINAL--------------------------------------------------------------------------*/ 

non terminal NoTerminal PRG;
non terminal NoTerminal BLQ;
non terminal ArrayDeque<Dcl> DCLLIST;
non terminal ArrayDeque<String> SENTLIST;


non terminal NoTerminal DCL;
non terminal String DEFCTE;
non terminal List<String> CTELIST;
non terminal String SIMPVALUE;

non terminal String DEFVAR;
non terminal String DEFVARLIST;
non terminal ArrayDeque<String> VARLIST;

non terminal NoTerminal DEFPROC;
non terminal NoTerminal DEFFUN;
non terminal String FORMAL_PARAMLIST;
non terminal String FORMAL_PARAM;
non terminal String TBAS;


non terminal String SENT;
non terminal String ASIG;
non terminal String ID;
non terminal String EXP;
non terminal String OP;
non terminal String OPARIT;
non terminal String FACTOR;
non terminal String SUBPPARAMLIST;
non terminal ArrayDeque<String> EXPLIST;
non terminal String PROC_CALL;


non terminal String EXPCOND;
non terminal String OPLOG;
non terminal String FACTORCOND;
non terminal String OPCOMP;
non terminal NoTerminal INC;


non terminal String X;



/* ---------------------------Seccion de precedencia y asociacion de los terminales----------------------------------------*/
   

precedence left abre_parent, cierra_parent;
precedence left begin, end;
precedence left opr_iguales, opr_menor, opr_mayor,  opr_menor_igual, opr_mayor_igual;
precedence left op_suma, op_resta;
precedence left op_mult, op_div, op_mod;
precedence left opl_or, opl_and;




/* -------------------------------------------- Seccion de la gramatica--------------------- ------------------------ */


/*
* PRG ::= "program" identifier ";" BLQ "."
          | PRG ::=  | "UNIT" identifier ";" DCLLIST "."
*/

PRG ::= program:nombre identifier:id punto_y_coma:pyc BLQ:blq punto:pto
                  {:
                     Prg prg = new Prg(nombre, id, pyc, blq, pto);
                     
                   
                     System.out.println(prg.toString());
                     RESULT = prg;
                     parser.programa = RESULT;
                     
                  :}
                  
                  |unit:nombre identifier:id punto_y_coma:pyc DCLLIST:dcl punto:pto
                  {:
                    Prg unit = new Prg(id, pyc, pto,nombre,dcl);
                    System.out.println(prg.toString());
                    RESULT = unit; 
                     parser.programa = RESULT;
                  :}
                  |program:nombre identifier:id BLQ:blq punto:pto
                  {:
                     parser.syntax_error("Symbol [;] spanning from",idxleft, idxright);
                      Prg prg =new Prg(nombre, id, ";", blq, pto);
                      RESULT = prg;
                     parser.programa = RESULT;
                  :}
                  |unit:nombre identifier:id DCLLIST:dcl punto:pto
                  {:
                    parser.syntax_error("Symbol [;] spanning from ",idxleft, idxright);
                    Prg unit = new Prg(id, ";", pto,nombre,dcl);
                    RESULT = unit; 
                    parser.programa = RESULT;
                  :}
                  ;



/*
* BLQ ::= DCLLIST "begin" SENTLIST "end"
*/

BLQ ::= DCLLIST:cl begin:b SENTLIST:sl end:e
              {:
              
              Blq blq = new Blq(cl,"{",sl,"}");
              RESULT = new Blq(cl,"{",sl,"}");
              :}
              |begin:b SENTLIST:sl end:e
              {:
              RESULT = new Blq("{",sl,"}");
              :}
              |DCLLIST begin:b error:e end:end
              {:
                  parser.syntax_error(" spanning from",exleft);
                  RESULT = new Blq("{","}");
              :}
              ;


/*
* DCLLIST ::= ÊŽ | DCLLIST DCL
*/
DCLLIST ::= DCLLIST:dclList DCL:dcl
              {:
                 dclList.addFirst((Dcl)dcl);
                 RESULT = dclList;
              :}
              |DCL:dcl
              {:
                 ArrayDeque<Dcl> dclList = new ArrayDeque<>();
                 dclList.add((Dcl) dcl);
                 RESULT = dclList; 
              :}
              ;



/*
* SENTLIST ::= SENT |SENTLIST SENT
*/

SENTLIST ::= SENT:s
              {:
              ArrayDeque<String> sentList = new ArrayDeque<>();
             
              sentList.add(s);
              RESULT = sentList;
              :}
              |SENTLIST:sl SENT:s
              {:
              
               sl.add(s);
               RESULT = sl; 
              :}
              ;
              
     
/*
* DCL ::= DEFCTE | DEFVAR | DEFPROC | DEFFUN
*/
DCL ::= DEFCTE:dc
              {:
              char c = 'c';
              RESULT = new Dcl(dc,c);
              :}
              |DEFVAR:dv
              {:
                char v = 'v';
               RESULT = new Dcl(dv,v); 
              :}
              |DEFPROC:dp
              {:
                char p = 'p';
               RESULT = new Dcl(dp,p); 
              :}
              |DEFFUN:df
              {:
               char f = 'f';
               RESULT = new Dcl(df,f);
              :}
              
              ;


/*
* DEFCTE ::= "const" CTELIST
*/

DEFCTE ::= word_const:wc  CTELIST:cl
              {:
              
               String consts = "";
               DefCte dc = new DefCte("#define",cl);
               for(String c: cl){
                 consts += "#define "  + c.toString() + "\n";
               }
              
               
              // System.out.println(consts);
                RESULT = consts;
              :}
              ;




/*
*  CTELIST ::= identifier "=" SIMPVALUE ";"
*             | CTELIST identifier "=" SIMPVALUE ";"
*/

CTELIST ::= identifier:id opr_iguales:igual SIMPVALUE:sv punto_y_coma:pyc
            {:
              
              List<String>cl = new ArrayList<>();
              cl.add(id +" " + sv);
              RESULT = cl;
            :}
            |CTELIST:cl identifier:id opr_iguales:igual SIMPVALUE:sv punto_y_coma:pyc
            {:
              cl.add(id +" " + sv);
              RESULT = cl;
            :}
            |identifier:id opr_iguales:igual SIMPVALUE:sv
            {:
                List<String>cteList = new ArrayList<>();
                cteList.add(id +" " + sv);
                parser.syntax_error("Symbol [;] spanning from",svxleft, svxright);
                RESULT = cteList;
            :}
            |CTELIST:cl identifier:id opr_iguales:igual SIMPVALUE:sv
            {:
                parser.syntax_error("Symbol [;] spanning from ",svxleft, svxright);
               cl.add(id +" " + sv);
              RESULT = cl;
            
            :}
            |identifier:id  SIMPVALUE:sv punto_y_coma:pyc
            {: 
            parser.syntax_error("Symbol [=] spanning from  ",idxleft, idxright);
             List<String>cl = new ArrayList<>();
              cl.add(id +" " + sv);
              RESULT = cl;

            :}
            |CTELIST:cl identifier:id  SIMPVALUE:sv punto_y_coma:pyc
            {:
             parser.syntax_error("Symbol [=] spanning from ",idxleft, idxright);
             cl.add(id +" "+sv);
             RESULT = cl;
            :}
            ;



/*
* SIMPVALUE ::= numeric_integer_const | numeric_real_const
*               | string_const
*/


SIMPVALUE ::= numeric_integer_const:i
              {:
                
                RESULT = i;
              :}
              |numeric_real_const:r
               {:
               
                RESULT = r;
              :}
              |string_const:sc
               {:
               
                RESULT = sc;
              :}
              ;



/*
* DEFVAR ::= "var" DEFVARLIST ";"
*/

DEFVAR ::= var:v DEFVARLIST:dvl punto_y_coma:pyc
           {:
              //System.out.println(dvl + pyc);
              RESULT = dvl + pyc;
            :}
            |var:v DEFVARLIST:dvl 
            {:
             parser.syntax_error("Symbol [;] spanning from ",dvlxleft, dvlxright);
             
              RESULT = dvl + ";";
            :}
            ;
            



/*
* DEFVARLIST ::= VARLIST ":" TBAS | DEFVARLIST ";" VARLIST ":" TBAS
*
*/

DEFVARLIST ::= VARLIST:vl dospuntos:dp TBAS:tipo
               {:
                   String variables = "";
                   for(String id: vl) {variables = tipo + " " + id + " " +  variables ;}
                 RESULT = variables;
                :}
                |DEFVARLIST:dvl punto_y_coma:pyc VARLIST:vl dospuntos:dp TBAS:tipo
                {:
                
                  ArrayDeque<String> aux = new ArrayDeque<>();
                  
                  for(String id: vl) {aux.addFirst(tipo + " " + id + " " );}
                  
                  dvl +="; "  ;
                  for(String v: aux){ dvl =  dvl + v;}
                  RESULT = dvl;
                  
                 :} 
                |VARLIST:vl TBAS:tipo
                {:
                   parser.syntax_error("Symbol [:] spanning from ",vlxleft, vlxright);
                   String variables = "";
                   for(String id: vl) {variables = tipo + " " + id + " "  + variables;}
                  
                  RESULT = variables;
                :}
                ;




/*
* VARLIST ::= identifier | identifier "," VARLIST
*/
VARLIST::= identifier:id
           {:
           
             ArrayDeque<String>vl = new ArrayDeque<>();
             vl.add(id);
             RESULT = vl;
            :}
            
            | identifier:id coma:coma VARLIST:vl
            {:
              vl.add(id + coma);
             RESULT = vl;
            :}
            |identifier:id VARLIST:vl
            {:
             parser.syntax_error("Symbol [,] spanning from ",idxleft, idxright);
             vl.add(id + ", ");
             RESULT = vl;
            :}
            ;




/*
* DEFPROC ::= "procedure" identifier FORMAL_PARAMLIST ";" BLQ ";"
*/
            //CON PARAMETROS
DEFPROC ::= procedure:p identifier:id FORMAL_PARAMLIST:fpl punto_y_coma:pyc1 BLQ:blq punto_y_coma:pyc2
            {:
                 
            
             DefProc proc = new DefProc(p,id,fpl,pyc1,blq,pyc2);
             RESULT = proc;
             
            :}
            //SIN PARAMETROS
            |procedure:p identifier:id punto_y_coma:pyc1 BLQ:blq punto_y_coma:pyc2
            {:
             DefProc proc = new DefProc(p,id,pyc1,blq,pyc2);
             RESULT = proc;
              
            :}
             ;


/*
* "function" identifier FORMAL_PARAMLIST ":" TBAS ";" BLQ ";"
*/

DEFFUN ::=  function:f identifier:id  FORMAL_PARAMLIST:fpl dospuntos:dp TBAS:tipo punto_y_coma:pyc1 X BLQ:blq punto_y_coma:pyc2
            {:
             
            
             DefFun fun = new DefFun(f,id,fpl,dp,tipo,pyc1,blq,pyc2);
             RESULT = fun;
               
            :}
            |function:f identifier:id dospuntos:dp TBAS:tipo punto_y_coma:pyc1 X BLQ:blq punto_y_coma:pyc2
            {:
            
             DefFun fun = new DefFun(f,id,dp,tipo,pyc1,blq,pyc2);
             RESULT = fun;
             
            :}
             ;


/*
*  AcciÃ³n ficticia que asocia el valor del nombre de la funciÃ³n 
*/

X::= {:
           Symbol s = (Symbol) stack.get(6);
           this.nombrefuncion = s.value.toString();
           RESULT = s.value.toString();
     :}
      ;
      
     
/*
* FORMAL_PARAMLIST ::= ÊŽ | "(" FORMAL_PARAM ")"
*/
FORMAL_PARAMLIST ::= abre_parent:ap FORMAL_PARAM:fp cierra_parent:cp
                     {:
                       
                       RESULT = ap  + fp + cp;
                      
                      :}
             
                      ;






/*
*  FORMAL_PARAM ::= VARLIST ":" TBAS | VARLIST ":" TBAS ";" FORMAL_PARAM
*     
*/

FORMAL_PARAM ::= VARLIST:vl dospuntos:dp TBAS:tipo
                {:
                  String param = "";
                  
                //[v3,v2,v1]
                  for(String id: vl) {
                	    param = tipo + " " + id + " "  + param;
                  }
                  
                 RESULT = param;
                :}
                
                | VARLIST:vl dospuntos:dp TBAS:tipo punto_y_coma:pyc FORMAL_PARAM:fp
                
                {:
                 ArrayDeque<String> aux = new ArrayDeque<>();
                  
                  for(String id: vl) {
                      aux.add(tipo + " " + id + " " );
                	  
                  }
                  
                  fp = aux.pollFirst()+ ", " + fp;
                  for(String v: aux){
                       fp = v + fp;
                   }
                
                  RESULT = fp;
                :}
                ;





/*
* TBAS ::= "INTEGER" | "REAL"
*/

TBAS ::= integer:integer
         {:
           RESULT = "int";
          :}
          |real:real
          {:
           RESULT = "float";
          :}
          ;



/*
* SENT ::= ASIG ";" | PROC_CALL ";"
| "if" EXPCOND "then" BLQ "else" BLQ
| "while" EXPCOND "do" BLQ
| "repeat" BLQ "until" EXPCOND ";"
| "for" identifier ":=" EXP INC EXP "do" BLQ
*/

SENT ::= ASIG:asig punto_y_coma:pyc
          {:
            
            //RESULT = new Sent(pyc,asig);
            RESULT = asig + pyc + "\n";
          :}
          |PROC_CALL:proc_call punto_y_coma:pyc
          {:
             RESULT = proc_call + pyc + "\n";
            //RESULT = new Sent(pyc, proc_call);
          :}
          |word_if:wi EXPCOND:expCond word_then:wt BLQ:blq1 word_else:we BLQ:blq2
          {:
           //RESULT = new Sent(wi,expCond,wt,blq1,we,blq2);
          :}
          |word_while:ww EXPCOND:expCond word_do:wd BLQ:blq
          {:
          // RESULT = new Sent(ww,expCond,wd,blq);
          :}
          |word_repeat:wp BLQ:blq word_until:wu  EXPCOND:expCond punto_y_coma:pyc
          {:
            //RESULT = new Sent(wp,blq,wu,expCond,pyc);
          :}
          |word_for:wf identifier:id asignacion:a EXP:exp1 INC:i EXP:exp2 word_do:wd BLQ:blq
          {:
          // RESULT = new Sent(blq,wd,wf,a,id,exp1,i,exp2);
          :}
          |ASIG:asig 
          {:
             parser.syntax_error("Symbol  [;] spanning from ",asigxleft, asigxright);
            // RESULT = new Sent(asig,";");
          :}
          ;




/*
* INC ::= "to" | "downto"
*/


INC ::=  word_to:wt
       {:
          RESULT = new Inc(wt);
       :}
       |word_downto:wdownto
       {:
        RESULT = new Inc(wdownto);
       :}
       ;




/*
* ASIG ::= ID ":=" EXP
*/

ASIG ::= ID:id asignacion:asig EXP:exp
         {:   
            
            if(this.nombrefuncion != null){
	             if(this.nombrefuncion.equals(id)){
	               RESULT = "return "  + exp;
	             }else{
	              RESULT = id + " = " + exp;
	            }
             }else{
                RESULT = id + " = " + exp;
             }
            
            
         :}
         |ID:id  EXP:exp
         {:
            parser.syntax_error("Symbol [:=] spanning from ",idxleft, idxright); 
            RESULT = id + " = " + exp;
         :}
         ;


/*
* ID := identifier
*/

ID ::= identifier:id
      {:
        RESULT = id;
      :}
      ;
    
    
    
    
    
    

/*
* EXP ::= EXP OP EXP | FACTOR
*/

EXP ::= EXP:exp1 OP:op EXP:exp2
        {:
            RESULT =  exp1 + op +exp2;
          :}
         |FACTOR:f
         {:
          
           RESULT = f;
          :}
          ;





/*
* OP ::= OPARIT
*/

OP ::= OPARIT:opa
       {:
          RESULT = opa;
        :}
        ;



/*
* OPARIT ::= "+" | "-" | "*" | "div" | "mod"
*/


OPARIT ::= op_suma:suma
           {:
               RESULT = " + ";
            :}
            |op_resta:resta
            {:
               RESULT = " - ";
            :}
            |op_mult:mult
            {:
               RESULT = " * ";
            :}
            |op_div:div
            {:
               RESULT = " / ";
            :}
            |op_mod:mod
            {:
              RESULT = " % ";
            :}
            ;
            
            





/*
* FACTOR ::= SIMPVALUE | "(" EXP ")" | identifier SUBPPARAMLIST
*/


FACTOR ::= SIMPVALUE:c
            {:
               RESULT = c;
            :}
            | abre_parent:ap EXP:exp cierra_parent:cp
            {:
                RESULT = ap + exp +cp;
            :}
            | identifier:id SUBPPARAMLIST:spl
            {:
                
                RESULT =  id + " "+ spl;
            :}
            |identifier:id
            {:
             RESULT = id;
            :}
            ;



/*
* SUBPPARAMLIST ::= lambda | "(" EXPLIST ")"
*/

SUBPPARAMLIST ::= abre_parent:ap EXPLIST:explist cierra_parent:cp
                  {:
                     String aux = "";
                      for(String exp: explist){
                           aux += exp ;
                       }
                  
                    
                     RESULT = ap + aux + cp;
                  :}
                  ;




/*
* EXPLIST ::= EXP | EXP "," EXPLIST
*/

EXPLIST ::= EXP:exp
            {:
              ArrayDeque<String> list = new ArrayDeque<>();
              list.add(exp);
              RESULT = list;
            :}
            |EXP:exp coma:coma EXPLIST:expl
            {:
             expl.addFirst(exp + coma);
             RESULT = expl;
            :}
            |EXP:exp  EXPLIST:expl
            {:
                parser.syntax_error("Symbol [,] spanning from ",expxleft, expxright); 
                 expl.addFirst(exp + ", ");
                RESULT = expl;
            :}
            ;



/*
* PROC_CALL ::= identifier SUBPPARAMLIST
*/ 


PROC_CALL ::= identifier:id SUBPPARAMLIST:spl
              {:
                RESULT = id + " "+ spl;
              :}
              |identifier:id
              {:
               RESULT = id;
              :}
              ;
  


/*
* EXPCOND ::= EXPCOND OPLOG EXPCOND | FACTORCOND
*/

EXPCOND ::= EXPCOND:ec1 OPLOG:ol EXPCOND:ec2
            {:
              RESULT = ec1 + ol + ec2;
            :}
            |FACTORCOND:fc
            {:
              RESULT = fc;
            :}
            ;
            


/*
* OPLOG ::= "or" | "and"
*/


OPLOG ::= opl_or:opl_or
         {:
           RESULT = " || ";
         :}
         |opl_and:opl_and
         {:
          RESULT = " && ";
         :}
         ;




/*
* FACTORCOND ::= EXP OPCOMP EXP | "(" EXP ")" | "not" FACTORCOND
*/


FACTORCOND ::= EXP:exp1 OPCOMP:opComp EXP:exp2
               {:
                  RESULT = exp1 + opComp + exp2;
               :}
               |not:not FACTORCOND:fc
               {:
                 RESULT = "!" + fc;
               :}
               |abre_parent:ap EXP:exp cierra_parent:cp
               {:
                 RESULT = ap + exp + cp;
               :}
               ;





/*
* OPCOMP ::= "<" | ">" | "<=" | ">=" | "="
*/


OPCOMP ::= opr_menor:opr_menor
           {:
             RESULT = " < ";
             
             
           :}
           |opr_mayor:opr_mayor
           {:
             RESULT = " > ";
           :}
           |opr_menor_igual:opr_menor_igual
           {:
             RESULT = " <= ";   
           :}
           |opr_mayor_igual:opr_mayor_igual
           {:
             RESULT = " >= ";   
           :}
           |opr_iguales:opr_iguales
           {:
             RESULT = " == ";  
              
           :}
           ;











































